package spring.boot.springjdbc;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.namedparam.MapSqlParameterSource;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.jdbc.core.namedparam.SqlParameterSource;
import org.springframework.jdbc.core.simple.SimpleJdbcInsert;
import org.springframework.stereotype.Component;

import java.awt.print.Book;
import java.sql.ResultSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * Spring JDBC Last modified: April 26, 2020
 * https://www.baeldung.com/spring-jdbc-jdbctemplate
 *
 * Many things do NOT work.
 */
@Component
public class OrdersRepository
{
//  private DataSource dataSource;
  protected JdbcTemplate jdbcTemplate;

  @Autowired
  private NamedParameterJdbcTemplate namedParameterJdbcTemplate;

  public OrdersRepository( JdbcTemplate iniJdbcTemplate)
  {
    jdbcTemplate = iniJdbcTemplate;
  }

  public List<Item> getAllItemsTyped()
  {
    final String selectAllItems = "SELECT id, name FROM items";
    List<Item> items = jdbcTemplate.queryForList( selectAllItems, Item.class); // some automagical mapping is involved, not clear how it works atm.

    return items;
  }

  public List<Item> getAllItemsFieldNamesObject()
  {
    final String sqlSelectAllItems = "SELECT id, name FROM items";

    List<Map<String, Object>> rows = jdbcTemplate.queryForList( sqlSelectAllItems);

    List<Item> allEvents = rows.stream().map( rowMap -> { Item newItem = new Item( (Integer)rowMap.get( "id"), (String)rowMap.get( "name")); return newItem;}).collect( Collectors.toList());

    return allEvents;
  }

  public void addItem( Integer newId, String newName)
  {
    final String sqlUpdateItem = "INSERT INTO items VALUES( null, ?)";

    jdbcTemplate.update( sqlUpdateItem, newName);
  }

  public void updateItem( Integer id, String newName)
  {
    final String sqlUpdateItem = "UPDATE items SET name = ? WHERE id=?";

    jdbcTemplate.update( sqlUpdateItem, newName, id);
  }


  public void simpleJdbcInsert( Item newItem)
  {
    SimpleJdbcInsert simpleJdbcInsert = new SimpleJdbcInsert( jdbcTemplate.getDataSource()).withTableName( "items");

    Map<String, Object> parameters = new HashMap<String, Object>();
//    parameters.put( "id", null);
    parameters.put( "name", newItem.getName());

    int rc = simpleJdbcInsert.execute( parameters);

    System.out.println( "simpleJdbcInsert() : simpleJdbcInsert.execute(parameters) => " + rc);

  }

  public Item getItemNamed( Integer id)
  {
    /*
    CREATE TABLE IF NOT EXISTS items
    (
      id   INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 MAXVALUE 99999 INCREMENT BY 1 NOCACHE NOCYCLE),
      name VARCHAR2(15)
    );
    */

    Item item = null;
    Optional<Item> itemsFound  = namedParameterJdbcTemplate.query( "SELECT id, name FROM items WHERE id = :bla",
                                                                  new MapSqlParameterSource().addValue("bla", id),
             ( rs, n) -> new Item( rs.getInt( "id"), rs.getString( "name"))} } rowMapper
                                                                  (rs, rowNum) ->  Optional.of(new Item( rs.getInt( "id"), rs.getString( "name")) ));

    if ( itemsFound.size() > 0 )
    {
      item = (Item) itemsFound.get( 0);
    }

    return item;
  }

  /*
  public void updateItemNamed( Integer id, String newName)
  {
    None of the methods in jdbcTemplate has a parameter SqlParameterSource (excerpt taken from Baeldung ...)
    SqlParameterSource namedParameters = new MapSqlParameterSource().addValue("id", id).addValue( "name", newName);
    String result = jdbcTemplate.queryForObject( "SELECT id, name FROM items WHERE id=:id", namedParameters, String.class);
  }
  */


}